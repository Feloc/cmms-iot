generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TECH
  VIEWER
}


model Tenant {
  id         String   @id @default(cuid())
  slug       String   @unique
  name       String
  users      User[]
  assets     Asset[]
  rules      Rule[]
  alerts     Alert[]
  notices    Notice[]
  workOrders WorkOrder[]
  assignments WOAssignment[]
  workLog    WorkLog[]
  inventory  InventoryItem[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  symptomCodes   SymptomCode[]
  causeCodes     CauseCode[]
  remedyCodes    RemedyCode[]
  workOrderResolutions WorkOrderResolution[]
  workOrderPartUses WorkOrderPartUsed[]
  workMeasurements   WorkMeasurement[]
  attachments    Attachment[]
  workNotes          WorkNote[]
}

model User {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  email     String
  password  String
  role      Role     @default(ADMIN)
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([tenantId, email])
}

model Asset {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  code      String
  name      String
  type      String?
  location  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([tenantId, code])
}

model Rule {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  assetCode String
  sensor    String
  type      String   // THRESHOLD | ROC
  operator  String?  // >, <, >=, <= (para THRESHOLD)
  value     Float?   // umbral
  windowSec Int?     // para ROC
  rocValue  Float?   // delta permitido
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([tenantId, assetCode, sensor])
}

model Alert {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  assetCode String
  sensor    String
  kind      String   // THRESHOLD | ROC
  message   String
  status    String   @default("OPEN")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notices   Notice[]
  @@index([tenantId, assetCode, sensor])
}

model Notice {
  id               String         @id @default(cuid())
  tenantId         String
  tenant           Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  source           NoticeSource
  alertId          String?
  alert            Alert?         @relation(fields: [alertId], references: [id])

  assetCode        String
  title            String
  body             String?
  category         NoticeCategory?
  severity         Severity?
  status           NoticeStatus   @default(OPEN)

  createdByUserId  String
  assignedToUserId String?
  dueDate          DateTime?
  startedAt        DateTime?
  resolvedAt       DateTime?
  downtimeMin      Int?
  tags             String[]       @default([])
  attachments      Json?

  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  workOrders       WorkOrder[]

  @@index([tenantId, status])
  @@index([tenantId, assetCode, status])
  @@index([tenantId, createdAt])
}

enum NoticeSource { 
  RULE
  MANUAL
  IMPORT 
}
enum NoticeCategory { 
  INCIDENT
  MAINT_LOG
  CONSUMABLE_CHANGE
  INSPECTION
  OTHER 
}
enum NoticeStatus {
  OPEN
  IN_PROGRESS 
  RESOLVED 
  CLOSED 
}
enum Severity { 
  LOW 
  MEDIUM 
  HIGH 
  CRITICAL 
}


model WorkOrder {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  noticeId    String?
  notice      Notice?  @relation(fields: [noticeId], references: [id])

  assetCode   String
  title       String
  description String?
  status      WorkOrderStatus  @default(OPEN)
  priority    WorkOrderPriority?

  dueDate     DateTime?
  startedAt   DateTime?
  completedAt DateTime?

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assignments WOAssignment[]
  workLogs    WorkLog[]
  workOrderResolutions WorkOrderResolution[]
  workOrderPartUses WorkOrderPartUsed[]
  workMeasurements   WorkMeasurement[]
  attachments        Attachment[]
  workNotes          WorkNote[]

  @@index([tenantId, status])
  @@index([tenantId, assetCode, status])
}

enum WorkOrderStatus {
  OPEN
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CLOSED
  CANCELED
}

enum WorkOrderPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model WOAssignment {
  id           String           @id @default(cuid())
  tenantId     String
  tenant       Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  workOrderId  String
  workOrder    WorkOrder        @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  userId       String
  role         AssignmentRole   @default(TECHNICIAN)
  state        AssignmentState  @default(ACTIVE)
  note         String?
  
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@index([tenantId, workOrderId, state])
  @@index([tenantId, userId, state])
}

enum AssignmentRole {
  TECHNICIAN
  SUPERVISOR
}

enum AssignmentState {
  ACTIVE
  REMOVED
}

model WorkLog {
  id             String         @id @default(cuid())
  tenantId       String
  tenant         Tenant         @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  workOrderId    String
  workOrder      WorkOrder      @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  userId         String
  source         WorkLogSource  @default(MANUAL)
  note           String?

  startedAt      DateTime
  endedAt        DateTime?

  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  @@index([tenantId, workOrderId])
  @@index([tenantId, userId, startedAt])
}

enum WorkLogSource {
  MANUAL
  IMPORT
  IOT
}

model InventoryItem {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  sku       String
  name      String
  qty       Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([tenantId, sku])
}


/// === Catálogos por tenant ===
model SymptomCode {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  code      String
  name      String
  enabled   Boolean  @default(true)
  assetType String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workOrderResolutios WorkOrderResolution[]

  @@unique([tenantId, code])
}

model CauseCode {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  code      String
  name      String
  enabled   Boolean  @default(true)
  assetType String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workOrderResolutios WorkOrderResolution[]

  @@unique([tenantId, code])
}

model RemedyCode {
  id        String   @id @default(cuid())
  tenantId  String
  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  code      String
  name      String
  enabled   Boolean  @default(true)
  assetType String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workOrderResolutios WorkOrderResolution[]

  @@unique([tenantId, code])
}

/// === Desarrollo/Resolución de la OT ===
model WorkOrderResolution {
  id                        String   @id @default(cuid())
  tenantId                  String
  tenant                    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  workOrderId               String   @unique
  workOrder                 WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  symptomCodeId             String?
  symptomCode               SymptomCode? @relation(fields: [symptomCodeId], references: [id])
  symptomOther              String?

  causeCodeId               String?
  causeCode                 CauseCode?   @relation(fields: [causeCodeId], references: [id])
  causeOther                String?
  rootCauseText             String?

  remedyCodeId              String?
  remedyCode                RemedyCode?  @relation(fields: [remedyCodeId], references: [id])
  remedyOther               String?
  solutionSummary           String?
  preventiveRecommendation  String?

  resolvedByUserId          String?
  resolvedAt                DateTime?
  verifiedByUserId          String?
  verifiedAt                DateTime?
  verificationNotes         String?

  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@index([tenantId, workOrderId])
}

/// === Partes usadas ===
model WorkOrderPartUsed {
  id            String   @id @default(cuid())
  tenantId      String
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  workOrderId   String
  workOrder     WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  inventoryItemId String?
  freeText        String?
  qty             Float
  unitCost        Float?
  totalCost       Float?

  createdByUserId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([tenantId, workOrderId])
}

/// === Mediciones ===
enum MeasurementPhase {
  BEFORE
  AFTER
  OTHER
}

model WorkMeasurement {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  workOrderId String
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  type        String
  valueNumeric Float?
  valueText    String?
  unit        String?
  phase       MeasurementPhase @default(OTHER)
  takenAt     DateTime @default(now())

  createdByUserId String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([tenantId, workOrderId])
}

/// === Adjuntos ===
model Attachment {
  id          String    @id @default(cuid())
  tenantId    String
  tenant      Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  workOrderId String
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  type        AttachmentType
  filename    String
  mimeType    String
  size        Int
  url         String
  createdBy   String
  createdAt   DateTime  @default(now())

  @@index([tenantId, workOrderId, createdAt(sort: Desc)])
}

enum AttachmentType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}


/// === Notas técnicas ===
model WorkNote {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  workOrderId String
  workOrder   WorkOrder @relation(fields: [workOrderId], references: [id], onDelete: Cascade)

  note        String
  addedByUserId String
  addedAt     DateTime @default(now())

  @@index([tenantId, workOrderId, addedAt])
}
